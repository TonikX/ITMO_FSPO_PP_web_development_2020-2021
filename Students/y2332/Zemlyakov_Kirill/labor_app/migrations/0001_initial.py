# Generated by Django 3.1.6 on 2021-04-27 18:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Jobless',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(max_length=500, null=True)),
                ('lfm', models.CharField(max_length=200)),
                ('tel', models.CharField(max_length=13)),
                ('passport', models.CharField(max_length=15)),
                ('workexp', models.IntegerField(null=True)),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EducationalGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maxquanstud', models.IntegerField()),
                ('studquan', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='EducationalOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('type', models.CharField(choices=[('SPO', 'СПО'), ('SOO', 'СОО'), ('HS', 'ВО'), ('SO', 'СО')], max_length=5)),
                ('address', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='EducationalProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('startdate', models.DateField()),
                ('finishdate', models.DateField()),
                ('cost', models.IntegerField()),
                ('type', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Stipend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('startprov', models.DateField()),
                ('finprov', models.DateField()),
                ('jobless', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Passage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statofadopt', models.BooleanField(default=False)),
                ('document', models.BooleanField(default=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='labor_app.educationalgroup')),
                ('jobless', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='educationalprogram',
            constraint=models.CheckConstraint(check=models.Q(startdate__lte=django.db.models.expressions.F('finishdate')), name='start_findate'),
        ),
        migrations.AddConstraint(
            model_name='educationalprogram',
            constraint=models.CheckConstraint(check=models.Q(cost__gte=0), name='cost_check'),
        ),
        migrations.AddField(
            model_name='educationalgroup',
            name='pasg',
            field=models.ManyToManyField(through='labor_app.Passage', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='educationalgroup',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='labor_app.educationalprogram'),
        ),
        migrations.AddField(
            model_name='jobless',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='jobless',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='labor_app.educationalorganization'),
        ),
        migrations.AddField(
            model_name='jobless',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='stipend',
            constraint=models.CheckConstraint(check=models.Q(startprov__lte=django.db.models.expressions.F('finprov')), name='start_finprov'),
        ),
        migrations.AddConstraint(
            model_name='stipend',
            constraint=models.CheckConstraint(check=models.Q(value__gte=0), name='value_check'),
        ),
        migrations.AddConstraint(
            model_name='educationalgroup',
            constraint=models.CheckConstraint(check=models.Q(studquan__lte=django.db.models.expressions.F('maxquanstud')), name='max_stud'),
        ),
        migrations.AddConstraint(
            model_name='educationalgroup',
            constraint=models.CheckConstraint(check=models.Q(studquan__gte=0), name='stud_check'),
        ),
        migrations.AddConstraint(
            model_name='educationalgroup',
            constraint=models.CheckConstraint(check=models.Q(maxquanstud__gte=0), name='max_check'),
        ),
        migrations.AddConstraint(
            model_name='jobless',
            constraint=models.UniqueConstraint(fields=('passport',), name='passport_unique'),
        ),
        migrations.AddConstraint(
            model_name='jobless',
            constraint=models.CheckConstraint(check=models.Q(workexp__gte=0), name='labor_app_jobless_name_not_empty'),
        ),
    ]
