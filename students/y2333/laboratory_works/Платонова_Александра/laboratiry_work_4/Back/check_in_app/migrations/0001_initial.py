# Generated by Django 3.1.7 on 2021-04-06 09:52

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Resident',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('registration_num', models.IntegerField(blank=True, default=100, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('full_name', models.CharField(default='full_name', max_length=100)),
                ('passport', models.CharField(blank=True, default='passport', max_length=20)),
                ('children', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('educational_institution', models.CharField(blank=True, default='nothing', max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_district', models.CharField(max_length=50)),
                ('street', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Check_in_out',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_num', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('date_of_issue', models.DateField(blank=True, default=datetime.date.today)),
                ('comment', models.TextField(blank=True)),
                ('check_out_reason', models.TextField(blank=True)),
                ('date_of_checkout', models.DateField()),
                ('doc_name', models.CharField(max_length=100)),
                ('date_of_start', models.DateField(default=datetime.date.today)),
                ('resident_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Hostel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='name of the hostel', max_length=100)),
                ('house_num', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('building', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('address_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='check_in_app.address')),
            ],
        ),
        migrations.CreateModel(
            name='Organizatoin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('legal_address', models.TextField()),
                ('type', models.CharField(max_length=50)),
                ('TIN', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('beds', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('area', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('busy_beds', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('hostel_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='check_in_app.hostel')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('p', 'paid'), ('np', 'not paid'), ('pp', 'partially paid')], max_length=50)),
                ('date_pay', models.DateField(default=datetime.date.today)),
                ('check_in_out_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='check_in_app.check_in_out')),
            ],
        ),
        migrations.AddField(
            model_name='hostel',
            name='organization_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='check_in_app.organizatoin'),
        ),
        migrations.AddField(
            model_name='check_in_out',
            name='room_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='check_in_app.room'),
        ),
        migrations.AddField(
            model_name='resident',
            name='organization_id',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='check_in_app.organizatoin'),
        ),
        migrations.AddField(
            model_name='resident',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
